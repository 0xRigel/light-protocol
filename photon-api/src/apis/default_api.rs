/*
 * photon-indexer
 *
 * Solana indexer for general compression
 *
 * The version of the OpenAPI document: 0.15.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`get_compressed_account_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedAccountPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compressed_account_proof_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedAccountProofPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compressed_accounts_by_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedAccountsByOwnerPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compressed_balance_by_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedBalanceByOwnerPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compressed_balance_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedBalancePostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compressed_token_account_balance_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedTokenAccountBalancePostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compressed_token_accounts_by_delegate_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedTokenAccountsByDelegatePostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compressed_token_accounts_by_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedTokenAccountsByOwnerPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compressed_token_balances_by_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressedTokenBalancesByOwnerPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compression_signatures_for_account_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressionSignaturesForAccountPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compression_signatures_for_address_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressionSignaturesForAddressPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compression_signatures_for_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressionSignaturesForOwnerPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_compression_signatures_for_token_owner_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCompressionSignaturesForTokenOwnerPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_indexer_health_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetIndexerHealthPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_indexer_slot_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetIndexerSlotPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_multiple_compressed_account_proofs_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMultipleCompressedAccountProofsPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_multiple_compressed_accounts_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMultipleCompressedAccountsPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transaction_with_compression_info_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionWithCompressionInfoPostError {
    Status400(models::GetCompressedAccountPost400Response),
    Status401(models::GetCompressedAccountPost400Response),
    Status403(models::GetCompressedAccountPost400Response),
    Status404(models::GetCompressedAccountPost400Response),
    Status429(models::GetCompressedAccountPost400Response),
    Status500(models::GetCompressedAccountPost400Response),
    UnknownValue(serde_json::Value),
}

pub async fn get_compressed_account_post(
    configuration: &configuration::Configuration,
    get_compressed_account_post_request: models::GetCompressedAccountPostRequest,
) -> Result<models::GetCompressedAccountPost200Response, Error<GetCompressedAccountPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/getCompressedAccount", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&get_compressed_account_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedAccountPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compressed_account_proof_post(
    configuration: &configuration::Configuration,
    get_compressed_account_proof_post_request: models::GetCompressedAccountProofPostRequest,
) -> Result<
    models::GetCompressedAccountProofPost200Response,
    Error<GetCompressedAccountProofPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressedAccountProof",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&get_compressed_account_proof_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedAccountProofPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compressed_accounts_by_owner_post(
    configuration: &configuration::Configuration,
    get_compressed_accounts_by_owner_post_request: models::GetCompressedAccountsByOwnerPostRequest,
) -> Result<
    models::GetCompressedAccountsByOwnerPost200Response,
    Error<GetCompressedAccountsByOwnerPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressedAccountsByOwner",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compressed_accounts_by_owner_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedAccountsByOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compressed_balance_by_owner_post(
    configuration: &configuration::Configuration,
    get_compressed_balance_by_owner_post_request: models::GetCompressedBalanceByOwnerPostRequest,
) -> Result<models::GetCompressedBalancePost200Response, Error<GetCompressedBalanceByOwnerPostError>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressedBalanceByOwner",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compressed_balance_by_owner_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedBalanceByOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compressed_balance_post(
    configuration: &configuration::Configuration,
    get_compressed_balance_post_request: models::GetCompressedBalancePostRequest,
) -> Result<models::GetCompressedBalancePost200Response, Error<GetCompressedBalancePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/getCompressedBalance", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&get_compressed_balance_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedBalancePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compressed_token_account_balance_post(
    configuration: &configuration::Configuration,
    get_compressed_token_account_balance_post_request: models::GetCompressedTokenAccountBalancePostRequest,
) -> Result<
    models::GetCompressedTokenAccountBalancePost200Response,
    Error<GetCompressedTokenAccountBalancePostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressedTokenAccountBalance",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compressed_token_account_balance_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedTokenAccountBalancePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compressed_token_accounts_by_delegate_post(
    configuration: &configuration::Configuration,
    get_compressed_token_accounts_by_delegate_post_request: models::GetCompressedTokenAccountsByDelegatePostRequest,
) -> Result<
    models::GetCompressedTokenAccountsByDelegatePost200Response,
    Error<GetCompressedTokenAccountsByDelegatePostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressedTokenAccountsByDelegate",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compressed_token_accounts_by_delegate_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedTokenAccountsByDelegatePostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compressed_token_accounts_by_owner_post(
    configuration: &configuration::Configuration,
    get_compressed_token_accounts_by_owner_post_request: models::GetCompressedTokenAccountsByOwnerPostRequest,
) -> Result<
    models::GetCompressedTokenAccountsByDelegatePost200Response,
    Error<GetCompressedTokenAccountsByOwnerPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressedTokenAccountsByOwner",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compressed_token_accounts_by_owner_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedTokenAccountsByOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compressed_token_balances_by_owner_post(
    configuration: &configuration::Configuration,
    get_compressed_token_balances_by_owner_post_request: models::GetCompressedTokenBalancesByOwnerPostRequest,
) -> Result<
    models::GetCompressedTokenBalancesByOwnerPost200Response,
    Error<GetCompressedTokenBalancesByOwnerPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressedTokenBalancesByOwner",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compressed_token_balances_by_owner_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressedTokenBalancesByOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compression_signatures_for_account_post(
    configuration: &configuration::Configuration,
    get_compression_signatures_for_account_post_request: models::GetCompressionSignaturesForAccountPostRequest,
) -> Result<
    models::GetCompressionSignaturesForAccountPost200Response,
    Error<GetCompressionSignaturesForAccountPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressionSignaturesForAccount",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compression_signatures_for_account_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressionSignaturesForAccountPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compression_signatures_for_address_post(
    configuration: &configuration::Configuration,
    get_compression_signatures_for_address_post_request: models::GetCompressionSignaturesForAddressPostRequest,
) -> Result<
    models::GetCompressionSignaturesForAddressPost200Response,
    Error<GetCompressionSignaturesForAddressPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressionSignaturesForAddress",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compression_signatures_for_address_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressionSignaturesForAddressPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compression_signatures_for_owner_post(
    configuration: &configuration::Configuration,
    get_compression_signatures_for_owner_post_request: models::GetCompressionSignaturesForOwnerPostRequest,
) -> Result<
    models::GetCompressionSignaturesForAddressPost200Response,
    Error<GetCompressionSignaturesForOwnerPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressionSignaturesForOwner",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compression_signatures_for_owner_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressionSignaturesForOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_compression_signatures_for_token_owner_post(
    configuration: &configuration::Configuration,
    get_compression_signatures_for_token_owner_post_request: models::GetCompressionSignaturesForTokenOwnerPostRequest,
) -> Result<
    models::GetCompressionSignaturesForAddressPost200Response,
    Error<GetCompressionSignaturesForTokenOwnerPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getCompressionSignaturesForTokenOwner",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_compression_signatures_for_token_owner_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCompressionSignaturesForTokenOwnerPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_indexer_health_post(
    configuration: &configuration::Configuration,
    get_indexer_health_post_request: models::GetIndexerHealthPostRequest,
) -> Result<models::GetIndexerHealthPost200Response, Error<GetIndexerHealthPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/getIndexerHealth", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&get_indexer_health_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetIndexerHealthPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_indexer_slot_post(
    configuration: &configuration::Configuration,
    get_indexer_slot_post_request: models::GetIndexerSlotPostRequest,
) -> Result<models::GetIndexerSlotPost200Response, Error<GetIndexerSlotPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/getIndexerSlot", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&get_indexer_slot_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetIndexerSlotPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_multiple_compressed_account_proofs_post(
    configuration: &configuration::Configuration,
    get_multiple_compressed_account_proofs_post_request: models::GetMultipleCompressedAccountProofsPostRequest,
) -> Result<
    models::GetMultipleCompressedAccountProofsPost200Response,
    Error<GetMultipleCompressedAccountProofsPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getMultipleCompressedAccountProofs",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_multiple_compressed_account_proofs_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMultipleCompressedAccountProofsPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_multiple_compressed_accounts_post(
    configuration: &configuration::Configuration,
    get_multiple_compressed_accounts_post_request: models::GetMultipleCompressedAccountsPostRequest,
) -> Result<
    models::GetMultipleCompressedAccountsPost200Response,
    Error<GetMultipleCompressedAccountsPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getMultipleCompressedAccounts",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_multiple_compressed_accounts_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMultipleCompressedAccountsPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_transaction_with_compression_info_post(
    configuration: &configuration::Configuration,
    get_transaction_with_compression_info_post_request: models::GetTransactionWithCompressionInfoPostRequest,
) -> Result<
    models::GetTransactionWithCompressionInfoPost200Response,
    Error<GetTransactionWithCompressionInfoPostError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/getTransactionWithCompressionInfo",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder =
        local_var_req_builder.json(&get_transaction_with_compression_info_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTransactionWithCompressionInfoPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
