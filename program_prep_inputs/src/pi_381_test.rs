use crate::hard_coded_verifying_key_pvk_new_ciruit::*;
use crate::prepare_inputs::*;

#[test]
fn prepare_inputs_o() {
    // test --->
    let commitment_slice = [
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
        21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
    ];
    let leaves_slice = [
        151, 85, 62, 182, 26, 238, 149, 115, 117, 89, 25, 56, 176, 33, 124, 54, 229, 133, 85, 3,
        220, 179, 228, 88, 14, 137, 72, 68, 230, 230, 25, 74,
    ];
    // <--- test end
    let inputs_bytes = [
        0, 0, 151, 85, 62, 182, 26, 238, 149, 115, 117, 89, 25, 56, 176, 33, 124, 54, 229, 133, 85,
        3, 220, 179, 228, 88, 14, 137, 72, 68, 230, 230, 25, 74, 132, 1, 14, 72, 111, 54, 123, 94,
        251, 147, 244, 75, 86, 228, 18, 126, 214, 240, 54, 15, 174, 215, 153, 99, 84, 160, 10, 189,
        134, 166, 186, 7, 186, 11, 250, 107, 131, 86, 119, 78, 239, 31, 50, 120, 132, 189, 175, 67,
        30, 6, 80, 159, 190, 145, 23, 2, 253, 30, 141, 111, 155, 114, 43, 46, 135, 53, 48, 239,
        128, 88, 250, 198, 168, 133, 132, 213, 193, 140, 155, 186, 110, 136, 116, 194, 162, 215,
        89, 167, 96, 40, 16, 127, 67, 203, 177, 47,
    ];
    println!(
        "inputs_bytes: {:?} => {:?}",
        inputs_bytes.len(),
        inputs_bytes
    );

    // pvk
    let mut r = vec![
        get_gamma_abc_g1_0(),
        get_gamma_abc_g1_1(),
        get_gamma_abc_g1_2(),
        get_gamma_abc_g1_3(),
        get_gamma_abc_g1_4(),
    ];

    // to inputs
    let input1 =
        <Fp256<ark_ed_on_bls12_381::FqParameters> as FromBytes>::read(&inputs_bytes[2..34])
            .unwrap();
    let input2 =
        <Fp256<ark_ed_on_bls12_381::FqParameters> as FromBytes>::read(&inputs_bytes[34..66])
            .unwrap();
    let input3 =
        <Fp256<ark_ed_on_bls12_381::FqParameters> as FromBytes>::read(&inputs_bytes[66..98])
            .unwrap();
    let input4 =
        <Fp256<ark_ed_on_bls12_381::FqParameters> as FromBytes>::read(&inputs_bytes[98..130])
            .unwrap();
    let inputs: Vec<ark_ff::Fp256<ark_bls12_381::FrParameters>> =
        vec![input1, input2, input3, input4];

    // call offchain custom function, get result
    let prepared_inputs_cus = prepare_inputs_custom(r, &inputs).unwrap(); // CUSTOM

    // call the instructions that make up the onchain version

    // compare results
}

#[test]
fn prepare_inputs_v1_offchain() {
    // 7 inputs รก 32bytes
    // 139,101,98,198,106,26,157,253,217,85,208,20,62,194,7,229,230,196,195,91,112,106,227,5,89,90,68,176,218,172,23,34,
    // 1,0,63,128,161,110,190,67,145,112,185,121,72,232,51,40,93,88,129,129,182,69,80,184,41,160,49,225,114,78,100,48
    // 224,137,70,92,255,138,142,119,60,162,100,218,34,199,20,246,167,35,235,134,225,54,67,209,246,194,128,223,27,115,112,25
    // 13,113,159,110,133,81,26,27,23,26,184,1,175,109,99,85,188,45,119,213,233,137,186,52,25,2,52,160,2,122,107,18
    // 62,183,110,221,22,145,254,220,22,239,208,169,202,190,70,169,206,157,185,145,226,81,196,182,29,125,181,119,242,71,107,10
    // 167,4,10,212,160,90,85,209,147,16,119,99,254,93,143,137,91,121,198,246,245,79,190,201,63,229,250,134,157,180,3,12,
    // 228,236,174,112,138,244,188,161,144,60,210,99,115,64,69,63,35,176,250,189,20,28,23,2,19,94,196,88,14,51,12,21
    let inputs_bytes = [
        139, 101, 98, 198, 106, 26, 157, 253, 217, 85, 208, 20, 62, 194, 7, 229, 230, 196, 195, 91,
        112, 106, 227, 5, 89, 90, 68, 176, 218, 172, 23, 34, 1, 0, 63, 128, 161, 110, 190, 67, 145,
        112, 185, 121, 72, 232, 51, 40, 93, 88, 129, 129, 182, 69, 80, 184, 41, 160, 49, 225, 114,
        78, 100, 48, 224, 137, 70, 92, 255, 138, 142, 119, 60, 162, 100, 218, 34, 199, 20, 246,
        167, 35, 235, 134, 225, 54, 67, 209, 246, 194, 128, 223, 27, 115, 112, 25, 13, 113, 159,
        110, 133, 81, 26, 27, 23, 26, 184, 1, 175, 109, 99, 85, 188, 45, 119, 213, 233, 137, 186,
        52, 25, 2, 52, 160, 2, 122, 107, 18, 62, 183, 110, 221, 22, 145, 254, 220, 22, 239, 208,
        169, 202, 190, 70, 169, 206, 157, 185, 145, 226, 81, 196, 182, 29, 125, 181, 119, 242, 71,
        107, 10, 167, 4, 10, 212, 160, 90, 85, 209, 147, 16, 119, 99, 254, 93, 143, 137, 91, 121,
        198, 246, 245, 79, 190, 201, 63, 229, 250, 134, 157, 180, 3, 12, 228, 236, 174, 112, 138,
        244, 188, 161, 144, 60, 210, 99, 115, 64, 69, 63, 35, 176, 250, 189, 20, 28, 23, 2, 19, 94,
        196, 88, 14, 51, 12, 21,
    ];
}
